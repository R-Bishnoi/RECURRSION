

//brute force approach 
//time complexity  O(n*n!)
//space complexity  O(n)


class Solution{
public:

//find all permutaions
void solve(string s,vector<string>&v,int id){
    
    if(id==s.size()){
        v.push_back(s);
        return ;
    }
       
 for(int j=id;j<s.size();j++){
       swap(s[id],s[j]);
       solve(s,v,id+1);
      // backtrack 
       swap(s[id],s[j]);
   } 
    
    return;
    
}

    string kthPermutation(int n, int k){
        
       if(n==1)return "1";
       
       vector<string>v;
       string s="";
       for(int i=1;i<=n;i++){
          char c=i+48;
          s=s+c;
       }
       
       int id=0;
       solve(s,v,id);
       
     if(k>v.size())return "-1";
     sort(v.begin(),v.end());
     
     return v[k-1];
        
        
       
    }
    
    
};







//optimal solution 
//timecomplexity  O(n^2)
//space complexity O(n)


class Solution{
public:
    string kthPermutation(int n, int k){
     
     string ans="";   
      if(n==1)return "1";
      
      int fact=1;
      vector<int>v;
      
    for(int i=1;i<n;i++){
        v.push_back(i);
        fact=fact*i;
    }
    v.push_back(n);
    
 k=k-1;
 
 while(true){
     ans=ans+to_string(v[k/fact]);
     v.erase(v.begin()+k/fact);
     
     if(v.size()==0)break;
     
     k=k%fact;
     fact=fact/v.size();
     
 }
        
    return ans;    
      
    }
};













